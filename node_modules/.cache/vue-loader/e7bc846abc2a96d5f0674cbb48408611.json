{"remainingRequest":"/Users/will/code/fake apps/app2/Admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/will/code/fake apps/app2/Admin/src/router/views/projects/overview.vue?vue&type=template&id=da87a840&","dependencies":[{"path":"/Users/will/code/fake apps/app2/Admin/src/router/views/projects/overview.vue","mtime":1649815819254},{"path":"/Users/will/code/fake apps/app2/Admin/node_modules/cache-loader/dist/cjs.js","mtime":1618860734223},{"path":"/Users/will/code/fake apps/app2/Admin/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1649340987520},{"path":"/Users/will/code/fake apps/app2/Admin/node_modules/cache-loader/dist/cjs.js","mtime":1618860734223},{"path":"/Users/will/code/fake apps/app2/Admin/node_modules/vue-loader/lib/index.js","mtime":1649340987520}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}