{"remainingRequest":"/Users/will/code/fake apps/app2/Admin/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/will/code/fake apps/app2/Admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/will/code/fake apps/app2/Admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/will/code/fake apps/app2/Admin/src/router/views/dashboards/blog/index.vue?vue&type=template&id=4defa7c7&","dependencies":[{"path":"/Users/will/code/fake apps/app2/Admin/src/router/views/dashboards/blog/index.vue","mtime":1649815819404},{"path":"/Users/will/code/fake apps/app2/Admin/node_modules/cache-loader/dist/cjs.js","mtime":1618860734223},{"path":"/Users/will/code/fake apps/app2/Admin/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1649340987520},{"path":"/Users/will/code/fake apps/app2/Admin/node_modules/cache-loader/dist/cjs.js","mtime":1618860734223},{"path":"/Users/will/code/fake apps/app2/Admin/node_modules/vue-loader/lib/index.js","mtime":1649340987520}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}